//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CountDownMgrWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CountDownMgr), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("CreateCountDown", CreateCountDown);
		L.RegFunction("RemoveCountDown", RemoveCountDown);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateCountDown(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(CountDownMgr), typeof(float), typeof(LuaInterface.LuaFunction)))
			{
				CountDownMgr obj = (CountDownMgr)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				LuaFunction arg1 = ToLua.ToLuaFunction(L, 3);
				int o = obj.CreateCountDown(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(CountDownMgr), typeof(float), typeof(float), typeof(LuaInterface.LuaFunction)))
			{
				CountDownMgr obj = (CountDownMgr)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				int o = obj.CreateCountDown(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(CountDownMgr), typeof(float), typeof(float), typeof(LuaInterface.LuaFunction), typeof(LuaInterface.LuaFunction)))
			{
				CountDownMgr obj = (CountDownMgr)ToLua.ToObject(L, 1);
				float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				LuaFunction arg2 = ToLua.ToLuaFunction(L, 4);
				LuaFunction arg3 = ToLua.ToLuaFunction(L, 5);
				int o = obj.CreateCountDown(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: CountDownMgr.CreateCountDown");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveCountDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			CountDownMgr obj = (CountDownMgr)ToLua.CheckObject(L, 1, typeof(CountDownMgr));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.RemoveCountDown(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, CountDownMgr.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

