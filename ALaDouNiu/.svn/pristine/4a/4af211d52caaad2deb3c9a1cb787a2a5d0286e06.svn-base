//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CountDownWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CountDown), typeof(System.Object));
		L.RegFunction("FuncRate", FuncRate);
		L.RegFunction("FuncEnd", FuncEnd);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateCountDown);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ID", get_ID, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCountDown(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				LuaFunction arg3 = ToLua.CheckLuaFunction(L, 4);
				LuaFunction arg4 = ToLua.CheckLuaFunction(L, 5);
				CountDown obj = new CountDown(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: CountDown.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FuncRate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CountDown obj = (CountDown)ToLua.CheckObject(L, 1, typeof(CountDown));
			bool o = obj.FuncRate();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FuncEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CountDown obj = (CountDown)ToLua.CheckObject(L, 1, typeof(CountDown));
			obj.FuncEnd();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CountDown obj = (CountDown)ToLua.CheckObject(L, 1, typeof(CountDown));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CountDown obj = (CountDown)o;
			int ret = obj.ID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ID on a nil value" : e.Message);
		}
	}
}

