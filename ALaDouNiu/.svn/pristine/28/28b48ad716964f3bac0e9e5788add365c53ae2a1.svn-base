//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("NetHelper");
		L.RegFunction("RegNetMsgProcess", RegNetMsgProcess);
		L.RegFunction("RegisterNetExEvent", RegisterNetExEvent);
		L.RegFunction("RegHeartbeatFun", RegHeartbeatFun);
		L.RegFunction("DeleteHeartbeat", DeleteHeartbeat);
		L.RegFunction("CreateConnectionBySyn", CreateConnectionBySyn);
		L.RegFunction("CreateConnectionByAsync", CreateConnectionByAsync);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("SendMsg", SendMsg);
		L.RegFunction("SendHttpRequestBySyn", SendHttpRequestBySyn);
		L.RegFunction("SendHttpRequestByASyn", SendHttpRequestByASyn);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegNetMsgProcess(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			NetHelper.RegNetMsgProcess(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterNetExEvent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			NetHelper.RegisterNetExEvent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegHeartbeatFun(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			NetHelper.RegHeartbeatFun(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DeleteHeartbeat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetHelper.DeleteHeartbeat();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConnectionBySyn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = NetHelper.CreateConnectionBySyn(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateConnectionByAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
			NetHelper.CreateConnectionByAsync(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetHelper.Disconnect();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsg(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(short)))
			{
				short arg0 = (short)LuaDLL.lua_tonumber(L, 1);
				NetHelper.SendMsg(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(short), typeof(byte[])))
			{
				short arg0 = (short)LuaDLL.lua_tonumber(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				NetHelper.SendMsg(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: NetHelper.SendMsg");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendHttpRequestBySyn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			string o = NetHelper.SendHttpRequestBySyn(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendHttpRequestByASyn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.WWWForm arg1 = (UnityEngine.WWWForm)ToLua.CheckObject(L, 2, typeof(UnityEngine.WWWForm));
			LuaFunction arg2 = ToLua.CheckLuaFunction(L, 3);
			NetHelper.SendHttpRequestByASyn(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

