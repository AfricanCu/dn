//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaHelper), typeof(Asset.Script.Core.Singleton<LuaHelper>));
		L.RegFunction("DoFile", DoFile);
		L.RegFunction("LoadAllLuaScriptByPath", LoadAllLuaScriptByPath);
		L.RegFunction("GetLocalVersionCode", GetLocalVersionCode);
		L.RegFunction("New", _CreateLuaHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLuaHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				LuaHelper obj = new LuaHelper();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: LuaHelper.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaHelper obj = (LuaHelper)ToLua.CheckObject(L, 1, typeof(LuaHelper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.DoFile(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadAllLuaScriptByPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaHelper obj = (LuaHelper)ToLua.CheckObject(L, 1, typeof(LuaHelper));
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoadAllLuaScriptByPath(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLocalVersionCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaHelper obj = (LuaHelper)ToLua.CheckObject(L, 1, typeof(LuaHelper));
			string o = obj.GetLocalVersionCode();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

