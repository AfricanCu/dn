//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Asset_Script_Update_UpdateConfigWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Asset.Script.Update.UpdateConfig), typeof(Asset.Script.Core.Singleton<Asset.Script.Update.UpdateConfig>));
		L.RegFunction("UpdateUrl", UpdateUrl);
		L.RegFunction("GetSmallVersion", GetSmallVersion);
		L.RegFunction("New", _CreateAsset_Script_Update_UpdateConfig);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ResServerRoot", get_ResServerRoot, set_ResServerRoot);
		L.RegVar("VersionCodeUrl", get_VersionCodeUrl, set_VersionCodeUrl);
		L.RegVar("MD5Url", get_MD5Url, set_MD5Url);
		L.RegVar("LocalVersionCodePath", get_LocalVersionCodePath, set_LocalVersionCodePath);
		L.RegVar("VersionFileName", get_VersionFileName, set_VersionFileName);
		L.RegVar("iosVersion", get_iosVersion, set_iosVersion);
		L.RegVar("androidVersion", get_androidVersion, set_androidVersion);
		L.RegVar("ResServerUrl", get_ResServerUrl, set_ResServerUrl);
		L.RegVar("LoginServerUrl", get_LoginServerUrl, set_LoginServerUrl);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAsset_Script_Update_UpdateConfig(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Asset.Script.Update.UpdateConfig obj = new Asset.Script.Update.UpdateConfig();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Asset.Script.Update.UpdateConfig.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateUrl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)ToLua.CheckObject(L, 1, typeof(Asset.Script.Update.UpdateConfig));
			obj.UpdateUrl();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSmallVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)ToLua.CheckObject(L, 1, typeof(Asset.Script.Update.UpdateConfig));
			string o = obj.GetSmallVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResServerRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.ResServerRoot;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ResServerRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionCodeUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.VersionCodeUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionCodeUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MD5Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.MD5Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MD5Url on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LocalVersionCodePath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.LocalVersionCodePath;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LocalVersionCodePath on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_VersionFileName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.VersionFileName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionFileName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_iosVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.iosVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index iosVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_androidVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.androidVersion;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index androidVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResServerUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.ResServerUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ResServerUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LoginServerUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string ret = obj.LoginServerUrl;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LoginServerUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResServerRoot(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ResServerRoot = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ResServerRoot on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VersionCodeUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.VersionCodeUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionCodeUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MD5Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MD5Url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MD5Url on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LocalVersionCodePath(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.LocalVersionCodePath = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LocalVersionCodePath on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_VersionFileName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.VersionFileName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index VersionFileName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_iosVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.iosVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index iosVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_androidVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.androidVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index androidVersion on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ResServerUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ResServerUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ResServerUrl on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LoginServerUrl(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Asset.Script.Update.UpdateConfig obj = (Asset.Script.Update.UpdateConfig)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.LoginServerUrl = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index LoginServerUrl on a nil value" : e.Message);
		}
	}
}

