//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_HandheldWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Handheld), typeof(System.Object));
		L.RegFunction("PlayFullScreenMovie", PlayFullScreenMovie);
		L.RegFunction("Vibrate", Vibrate);
		L.RegFunction("GetActivityIndicatorStyle", GetActivityIndicatorStyle);
		L.RegFunction("StartActivityIndicator", StartActivityIndicator);
		L.RegFunction("StopActivityIndicator", StopActivityIndicator);
		L.RegFunction("ClearShaderCache", ClearShaderCache);
		L.RegFunction("New", _CreateUnityEngine_Handheld);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Handheld(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Handheld obj = new UnityEngine.Handheld();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Handheld.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayFullScreenMovie(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool o = UnityEngine.Handheld.PlayFullScreenMovie(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(UnityEngine.Color)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				bool o = UnityEngine.Handheld.PlayFullScreenMovie(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(UnityEngine.Color), typeof(UnityEngine.FullScreenMovieControlMode)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				UnityEngine.FullScreenMovieControlMode arg2 = (UnityEngine.FullScreenMovieControlMode)ToLua.ToObject(L, 3);
				bool o = UnityEngine.Handheld.PlayFullScreenMovie(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(UnityEngine.Color), typeof(UnityEngine.FullScreenMovieControlMode), typeof(UnityEngine.FullScreenMovieScalingMode)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UnityEngine.Color arg1 = ToLua.ToColor(L, 2);
				UnityEngine.FullScreenMovieControlMode arg2 = (UnityEngine.FullScreenMovieControlMode)ToLua.ToObject(L, 3);
				UnityEngine.FullScreenMovieScalingMode arg3 = (UnityEngine.FullScreenMovieScalingMode)ToLua.ToObject(L, 4);
				bool o = UnityEngine.Handheld.PlayFullScreenMovie(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Handheld.PlayFullScreenMovie");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Vibrate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Handheld.Vibrate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetActivityIndicatorStyle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Handheld.GetActivityIndicatorStyle();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartActivityIndicator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Handheld.StartActivityIndicator();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopActivityIndicator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Handheld.StopActivityIndicator();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearShaderCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Handheld.ClearShaderCache();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

